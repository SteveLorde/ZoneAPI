// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Zone.Data;

#nullable disable

namespace Zone.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240425101012_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Zone.Data.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ZoneLobbyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ZoneLobbyId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Zone.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JoinedOn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Zone.Data.Models.UsersInZones", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ZoneLobbyId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "ZoneLobbyId");

                    b.HasIndex("ZoneLobbyId");

                    b.ToTable("UsersInZones");
                });

            modelBuilder.Entity("Zone.Data.Models.ZoneLobby", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserOwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Zone.Data.Models.Note", b =>
                {
                    b.HasOne("Zone.Data.Models.ZoneLobby", "ZoneLobby")
                        .WithMany("Notes")
                        .HasForeignKey("ZoneLobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ZoneLobby");
                });

            modelBuilder.Entity("Zone.Data.Models.UsersInZones", b =>
                {
                    b.HasOne("Zone.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zone.Data.Models.ZoneLobby", "ZoneLobby")
                        .WithMany()
                        .HasForeignKey("ZoneLobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("ZoneLobby");
                });

            modelBuilder.Entity("Zone.Data.Models.ZoneLobby", b =>
                {
                    b.HasOne("Zone.Data.Models.User", "UserOwner")
                        .WithMany("CreatedZones")
                        .HasForeignKey("UserOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserOwner");
                });

            modelBuilder.Entity("Zone.Data.Models.User", b =>
                {
                    b.Navigation("CreatedZones");
                });

            modelBuilder.Entity("Zone.Data.Models.ZoneLobby", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
